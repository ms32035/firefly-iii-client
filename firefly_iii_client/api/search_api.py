# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API

    The version of the OpenAPI document: 6.1.24
    Contact: james@firefly-iii.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from firefly_iii_client.models.account_array import AccountArray
from firefly_iii_client.models.account_search_field_filter import AccountSearchFieldFilter
from firefly_iii_client.models.account_type_filter import AccountTypeFilter
from firefly_iii_client.models.transaction_array import TransactionArray

from firefly_iii_client.api_client import ApiClient, RequestSerialized
from firefly_iii_client.api_response import ApiResponse
from firefly_iii_client.rest import RESTResponseType


class SearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def search_accounts(
        self,
        query: Annotated[StrictStr, Field(description="The query you wish to search for.")],
        field: Annotated[AccountSearchFieldFilter, Field(description="The account field(s) you want to search in.")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of items per page. The default pagination is per 50 items.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number. The default pagination is per 50 items.")] = None,
        type: Annotated[Optional[AccountTypeFilter], Field(description="The type of accounts you wish to limit the search to.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AccountArray:
        """Search for accounts

        Search for accounts

        :param query: The query you wish to search for. (required)
        :type query: str
        :param field: The account field(s) you want to search in. (required)
        :type field: AccountSearchFieldFilter
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param limit: Number of items per page. The default pagination is per 50 items.
        :type limit: int
        :param page: Page number. The default pagination is per 50 items.
        :type page: int
        :param type: The type of accounts you wish to limit the search to.
        :type type: AccountTypeFilter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_accounts_serialize(
            query=query,
            field=field,
            x_trace_id=x_trace_id,
            limit=limit,
            page=page,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountArray",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_accounts_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="The query you wish to search for.")],
        field: Annotated[AccountSearchFieldFilter, Field(description="The account field(s) you want to search in.")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of items per page. The default pagination is per 50 items.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number. The default pagination is per 50 items.")] = None,
        type: Annotated[Optional[AccountTypeFilter], Field(description="The type of accounts you wish to limit the search to.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AccountArray]:
        """Search for accounts

        Search for accounts

        :param query: The query you wish to search for. (required)
        :type query: str
        :param field: The account field(s) you want to search in. (required)
        :type field: AccountSearchFieldFilter
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param limit: Number of items per page. The default pagination is per 50 items.
        :type limit: int
        :param page: Page number. The default pagination is per 50 items.
        :type page: int
        :param type: The type of accounts you wish to limit the search to.
        :type type: AccountTypeFilter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_accounts_serialize(
            query=query,
            field=field,
            x_trace_id=x_trace_id,
            limit=limit,
            page=page,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountArray",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_accounts_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="The query you wish to search for.")],
        field: Annotated[AccountSearchFieldFilter, Field(description="The account field(s) you want to search in.")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of items per page. The default pagination is per 50 items.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number. The default pagination is per 50 items.")] = None,
        type: Annotated[Optional[AccountTypeFilter], Field(description="The type of accounts you wish to limit the search to.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for accounts

        Search for accounts

        :param query: The query you wish to search for. (required)
        :type query: str
        :param field: The account field(s) you want to search in. (required)
        :type field: AccountSearchFieldFilter
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param limit: Number of items per page. The default pagination is per 50 items.
        :type limit: int
        :param page: Page number. The default pagination is per 50 items.
        :type page: int
        :param type: The type of accounts you wish to limit the search to.
        :type type: AccountTypeFilter
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_accounts_serialize(
            query=query,
            field=field,
            x_trace_id=x_trace_id,
            limit=limit,
            page=page,
            type=type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AccountArray",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_accounts_serialize(
        self,
        query,
        field,
        x_trace_id,
        limit,
        page,
        type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        if type is not None:
            
            _query_params.append(('type', type.value))
            
        if field is not None:
            
            _query_params.append(('field', field.value))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.api+json', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/search/accounts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_transactions(
        self,
        query: Annotated[StrictStr, Field(description="The query you wish to search for.")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of items per page. The default pagination is per 50 items.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number. The default pagination is per 50 items.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TransactionArray:
        """Search for transactions

        Searches through the users transactions.

        :param query: The query you wish to search for. (required)
        :type query: str
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param limit: Number of items per page. The default pagination is per 50 items.
        :type limit: int
        :param page: Page number. The default pagination is per 50 items.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_transactions_serialize(
            query=query,
            x_trace_id=x_trace_id,
            limit=limit,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionArray",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_transactions_with_http_info(
        self,
        query: Annotated[StrictStr, Field(description="The query you wish to search for.")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of items per page. The default pagination is per 50 items.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number. The default pagination is per 50 items.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TransactionArray]:
        """Search for transactions

        Searches through the users transactions.

        :param query: The query you wish to search for. (required)
        :type query: str
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param limit: Number of items per page. The default pagination is per 50 items.
        :type limit: int
        :param page: Page number. The default pagination is per 50 items.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_transactions_serialize(
            query=query,
            x_trace_id=x_trace_id,
            limit=limit,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionArray",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_transactions_without_preload_content(
        self,
        query: Annotated[StrictStr, Field(description="The query you wish to search for.")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of items per page. The default pagination is per 50 items.")] = None,
        page: Annotated[Optional[StrictInt], Field(description="Page number. The default pagination is per 50 items.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for transactions

        Searches through the users transactions.

        :param query: The query you wish to search for. (required)
        :type query: str
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param limit: Number of items per page. The default pagination is per 50 items.
        :type limit: int
        :param page: Page number. The default pagination is per 50 items.
        :type page: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_transactions_serialize(
            query=query,
            x_trace_id=x_trace_id,
            limit=limit,
            page=page,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TransactionArray",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_transactions_serialize(
        self,
        query,
        x_trace_id,
        limit,
        page,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if query is not None:
            
            _query_params.append(('query', query))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/vnd.api+json', 
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/search/transactions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


