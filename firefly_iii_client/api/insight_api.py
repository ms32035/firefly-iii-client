# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API

    The version of the OpenAPI document: 6.1.24
    Contact: james@firefly-iii.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from firefly_iii_client.models.insight_group_entry import InsightGroupEntry
from firefly_iii_client.models.insight_total_entry import InsightTotalEntry
from firefly_iii_client.models.insight_transfer_entry import InsightTransferEntry

from firefly_iii_client.api_client import ApiClient, RequestSerialized
from firefly_iii_client.api_response import ApiResponse
from firefly_iii_client.rest import RESTResponseType


class InsightApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def insight_expense_asset(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into expenses, grouped by asset account.

        This endpoint gives a summary of the expenses made by the user, grouped by asset account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_asset_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_asset_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into expenses, grouped by asset account.

        This endpoint gives a summary of the expenses made by the user, grouped by asset account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_asset_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_asset_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, grouped by asset account.

        This endpoint gives a summary of the expenses made by the user, grouped by asset account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_asset_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_asset_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/asset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_bill(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        bills: Annotated[Optional[List[StrictInt]], Field(description="The bills to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into expenses, grouped by bill.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param bills: The bills to be included in the results. 
        :type bills: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_bill_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            bills=bills,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_bill_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        bills: Annotated[Optional[List[StrictInt]], Field(description="The bills to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into expenses, grouped by bill.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param bills: The bills to be included in the results. 
        :type bills: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_bill_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            bills=bills,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_bill_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        bills: Annotated[Optional[List[StrictInt]], Field(description="The bills to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, grouped by bill.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) bill. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param bills: The bills to be included in the results. 
        :type bills: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_bill_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            bills=bills,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_bill_serialize(
        self,
        start,
        end,
        x_trace_id,
        bills,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'bills[]': 'multi',
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if bills is not None:
            
            _query_params.append(('bills[]', bills))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/bill',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_budget(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        budgets: Annotated[Optional[List[StrictInt]], Field(description="The budgets to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into expenses, grouped by budget.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param budgets: The budgets to be included in the results. 
        :type budgets: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_budget_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            budgets=budgets,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_budget_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        budgets: Annotated[Optional[List[StrictInt]], Field(description="The budgets to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into expenses, grouped by budget.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param budgets: The budgets to be included in the results. 
        :type budgets: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_budget_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            budgets=budgets,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_budget_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        budgets: Annotated[Optional[List[StrictInt]], Field(description="The budgets to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, grouped by budget.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) budget. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param budgets: The budgets to be included in the results. 
        :type budgets: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_budget_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            budgets=budgets,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_budget_serialize(
        self,
        start,
        end,
        x_trace_id,
        budgets,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'budgets[]': 'multi',
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if budgets is not None:
            
            _query_params.append(('budgets[]', budgets))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/budget',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_category(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into expenses, grouped by category.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_category_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into expenses, grouped by category.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_category_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, grouped by category.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_category_serialize(
        self,
        start,
        end,
        x_trace_id,
        categories,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'categories[]': 'multi',
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if categories is not None:
            
            _query_params.append(('categories[]', categories))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/category',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_expense(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you add the accounts ID's of expense accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID's. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into expenses, grouped by expense account.

        This endpoint gives a summary of the expenses made by the user, grouped by expense account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you add the accounts ID's of expense accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID's. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_expense_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_expense_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you add the accounts ID's of expense accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID's. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into expenses, grouped by expense account.

        This endpoint gives a summary of the expenses made by the user, grouped by expense account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you add the accounts ID's of expense accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID's. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_expense_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_expense_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you add the accounts ID's of expense accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID's. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, grouped by expense account.

        This endpoint gives a summary of the expenses made by the user, grouped by expense account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you add the accounts ID's of expense accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. You can combine both asset / liability and expense account ID's. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_expense_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_expense_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/expense',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_no_bill(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into expenses, without bill.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_bill_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_no_bill_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into expenses, without bill.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_bill_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_no_bill_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, without bill.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no bill. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_bill_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_no_bill_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/no-bill',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_no_budget(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into expenses, without budget.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_budget_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_no_budget_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into expenses, without budget.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_budget_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_no_budget_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, without budget.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no budget. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_budget_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_no_budget_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/no-budget',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_no_category(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into expenses, without category.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_no_category_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into expenses, without category.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_no_category_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, without category.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_no_category_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/no-category',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_no_tag(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into expenses, without tag.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_no_tag_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into expenses, without tag.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_no_tag_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, without tag.

        This endpoint gives a summary of the expenses made by the user, including only expenses with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_no_tag_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/no-tag',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_tag(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into expenses, grouped by tag.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_tag_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into expenses, grouped by tag.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_tag_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, grouped by tag.

        This endpoint gives a summary of the expenses made by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_tag_serialize(
        self,
        start,
        end,
        x_trace_id,
        tags,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags[]': 'multi',
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if tags is not None:
            
            _query_params.append(('tags[]', tags))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/tag',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_expense_total(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into total expenses.

        This endpoint gives a sum of the total expenses made by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_expense_total_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into total expenses.

        This endpoint gives a sum of the total expenses made by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_expense_total_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into total expenses.

        This endpoint gives a sum of the total expenses made by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only withdrawals from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_expense_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_expense_total_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/expense/total',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_income_asset(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into income, grouped by asset account.

        This endpoint gives a summary of the income received by the user, grouped by asset account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_asset_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_income_asset_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into income, grouped by asset account.

        This endpoint gives a summary of the income received by the user, grouped by asset account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_asset_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_income_asset_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into income, grouped by asset account.

        This endpoint gives a summary of the income received by the user, grouped by asset account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_asset_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_income_asset_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/income/asset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_income_category(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into income, grouped by category.

        This endpoint gives a summary of the income received by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_income_category_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into income, grouped by category.

        This endpoint gives a summary of the income received by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_income_category_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into income, grouped by category.

        This endpoint gives a summary of the income received by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_income_category_serialize(
        self,
        start,
        end,
        x_trace_id,
        categories,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'categories[]': 'multi',
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if categories is not None:
            
            _query_params.append(('categories[]', categories))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/income/category',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_income_no_category(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into income, without category.

        This endpoint gives a summary of the income received by the user, including only income with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_income_no_category_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into income, without category.

        This endpoint gives a summary of the income received by the user, including only income with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_income_no_category_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into income, without category.

        This endpoint gives a summary of the income received by the user, including only income with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_income_no_category_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/income/no-category',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_income_no_tag(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into income, without tag.

        This endpoint gives a summary of the income received by the user, including only income with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_income_no_tag_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into income, without tag.

        This endpoint gives a summary of the income received by the user, including only income with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_income_no_tag_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into income, without tag.

        This endpoint gives a summary of the income received by the user, including only income with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_income_no_tag_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/income/no-tag',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_income_revenue(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you add the accounts ID's of revenue accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID's. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into income, grouped by revenue account.

        This endpoint gives a summary of the income received by the user, grouped by revenue account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you add the accounts ID's of revenue accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID's. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_revenue_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_income_revenue_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you add the accounts ID's of revenue accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID's. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into income, grouped by revenue account.

        This endpoint gives a summary of the income received by the user, grouped by revenue account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you add the accounts ID's of revenue accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID's. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_revenue_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_income_revenue_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you add the accounts ID's of revenue accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID's. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into income, grouped by revenue account.

        This endpoint gives a summary of the income received by the user, grouped by revenue account. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you add the accounts ID's of revenue accounts, only those accounts are included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. You can combine both asset / liability and deposit account ID's. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_revenue_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_income_revenue_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/income/revenue',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_income_tag(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into income, grouped by tag.

        This endpoint gives a summary of the income received by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_income_tag_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into income, grouped by tag.

        This endpoint gives a summary of the income received by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_income_tag_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into income, grouped by tag.

        This endpoint gives a summary of the income received by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_income_tag_serialize(
        self,
        start,
        end,
        x_trace_id,
        tags,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags[]': 'multi',
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if tags is not None:
            
            _query_params.append(('tags[]', tags))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/income/tag',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_income_total(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into total income.

        This endpoint gives a sum of the total income received by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_income_total_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into total income.

        This endpoint gives a sum of the total income received by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_income_total_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into total income.

        This endpoint gives a sum of the total income received by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only deposits to those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_income_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_income_total_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/income/total',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_transfer_category(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into transfers, grouped by category.

        This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_transfer_category_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into transfers, grouped by category.

        This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_transfer_category_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        categories: Annotated[Optional[List[StrictInt]], Field(description="The categories to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into transfers, grouped by category.

        This endpoint gives a summary of the transfers made by the user, grouped by (any) category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param categories: The categories to be included in the results. 
        :type categories: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            categories=categories,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_transfer_category_serialize(
        self,
        start,
        end,
        x_trace_id,
        categories,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'categories[]': 'multi',
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if categories is not None:
            
            _query_params.append(('categories[]', categories))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/transfer/category',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_transfer_no_category(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into transfers, without category.

        This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_transfer_no_category_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into transfers, without category.

        This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_transfer_no_category_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into transfers, without category.

        This endpoint gives a summary of the transfers made by the user, including only transfers with no category. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_no_category_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_transfer_no_category_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/transfer/no-category',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_transfer_no_tag(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into expenses, without tag.

        This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_transfer_no_tag_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into expenses, without tag.

        This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_transfer_no_tag_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into expenses, without tag.

        This endpoint gives a summary of the transfers made by the user, including only transfers with no tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers from those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_no_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_transfer_no_tag_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/transfer/no-tag',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_transfer_tag(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightGroupEntry]:
        """Insight into transfers, grouped by tag.

        This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_transfer_tag_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightGroupEntry]]:
        """Insight into transfers, grouped by tag.

        This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_transfer_tag_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        tags: Annotated[Optional[List[StrictInt]], Field(description="The tags to be included in the results. ")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into transfers, grouped by tag.

        This endpoint gives a summary of the transfers created by the user, grouped by (any) tag. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param tags: The tags to be included in the results. 
        :type tags: List[int]
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_tag_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            tags=tags,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightGroupEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_transfer_tag_serialize(
        self,
        start,
        end,
        x_trace_id,
        tags,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tags[]': 'multi',
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if tags is not None:
            
            _query_params.append(('tags[]', tags))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/transfer/tag',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_transfer_total(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTotalEntry]:
        """Insight into total transfers.

        This endpoint gives a sum of the total amount transfers made by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_transfer_total_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTotalEntry]]:
        """Insight into total transfers.

        This endpoint gives a sum of the total amount transfers made by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_transfer_total_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into total transfers.

        This endpoint gives a sum of the total amount transfers made by the user. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfer_total_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTotalEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_transfer_total_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/transfer/total',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def insight_transfers(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InsightTransferEntry]:
        """Insight into transfers, grouped by account.

        This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfers_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTransferEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def insight_transfers_with_http_info(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InsightTransferEntry]]:
        """Insight into transfers, grouped by account.

        This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfers_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTransferEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def insight_transfers_without_preload_content(
        self,
        start: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        end: Annotated[date, Field(description="A date formatted YYYY-MM-DD. ")],
        x_trace_id: Annotated[Optional[StrictStr], Field(description="Unique identifier associated with this request.")] = None,
        accounts: Annotated[Optional[List[StrictInt]], Field(description="The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. ")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Insight into transfers, grouped by account.

        This endpoint gives a summary of the transfers made by the user, grouped by asset account or lability. 

        :param start: A date formatted YYYY-MM-DD.  (required)
        :type start: date
        :param end: A date formatted YYYY-MM-DD.  (required)
        :type end: date
        :param x_trace_id: Unique identifier associated with this request.
        :type x_trace_id: str
        :param accounts: The accounts to be included in the results. If you include ID's of asset accounts or liabilities, only transfers between those asset accounts / liabilities will be included. Other account ID's will be ignored. 
        :type accounts: List[int]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._insight_transfers_serialize(
            start=start,
            end=end,
            x_trace_id=x_trace_id,
            accounts=accounts,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InsightTransferEntry]",
            '400': "BadRequestResponse",
            '401': "UnauthenticatedResponse",
            '404': "NotFoundResponse",
            '500': "InternalExceptionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _insight_transfers_serialize(
        self,
        start,
        end,
        x_trace_id,
        accounts,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'accounts[]': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            if isinstance(start, date):
                _query_params.append(
                    (
                        'start',
                        start.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('start', start))
            
        if end is not None:
            if isinstance(end, date):
                _query_params.append(
                    (
                        'end',
                        end.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('end', end))
            
        if accounts is not None:
            
            _query_params.append(('accounts[]', accounts))
            
        # process the header parameters
        if x_trace_id is not None:
            _header_params['X-Trace-Id'] = x_trace_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'firefly_iii_auth', 
            'local_bearer_auth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/insight/transfer/asset',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


