# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API

    The version of the OpenAPI document: 6.1.24
    Contact: james@firefly-iii.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BasicSummaryEntry(BaseModel):
    """
    BasicSummaryEntry
    """ # noqa: E501
    currency_code: Optional[StrictStr] = None
    currency_decimal_places: Optional[StrictInt] = Field(default=None, description="Number of decimals for the associated currency.")
    currency_id: Optional[StrictStr] = Field(default=None, description="The currency ID of the associated currency.")
    currency_symbol: Optional[StrictStr] = None
    key: Optional[StrictStr] = Field(default=None, description="This is a reference to the type of info shared, not influenced by translations or user preferences. The EUR value is a reference to the currency code. Possibilities are: balance-in-ABC, spent-in-ABC, earned-in-ABC, bills-paid-in-ABC, bills-unpaid-in-ABC, left-to-spend-in-ABC and net-worth-in-ABC.")
    local_icon: Optional[StrictStr] = Field(default=None, description="Reference to a font-awesome icon without the fa- part.")
    monetary_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount as a float.")
    sub_title: Optional[StrictStr] = Field(default=None, description="A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant.")
    title: Optional[StrictStr] = Field(default=None, description="A translated title for the information shared.")
    value_parsed: Optional[StrictStr] = Field(default=None, description="The amount formatted according to the users locale")
    __properties: ClassVar[List[str]] = ["currency_code", "currency_decimal_places", "currency_id", "currency_symbol", "key", "local_icon", "monetary_value", "sub_title", "title", "value_parsed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BasicSummaryEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BasicSummaryEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency_code": obj.get("currency_code"),
            "currency_decimal_places": obj.get("currency_decimal_places"),
            "currency_id": obj.get("currency_id"),
            "currency_symbol": obj.get("currency_symbol"),
            "key": obj.get("key"),
            "local_icon": obj.get("local_icon"),
            "monetary_value": obj.get("monetary_value"),
            "sub_title": obj.get("sub_title"),
            "title": obj.get("title"),
            "value_parsed": obj.get("value_parsed")
        })
        return _obj


