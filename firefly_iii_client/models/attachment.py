# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API

    The version of the OpenAPI document: 6.1.24
    Contact: james@firefly-iii.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from firefly_iii_client.models.attachable_type import AttachableType
from typing import Optional, Set
from typing_extensions import Self

class Attachment(BaseModel):
    """
    Attachment
    """ # noqa: E501
    attachable_id: StrictStr = Field(description="ID of the model this attachment is linked to.")
    attachable_type: AttachableType
    created_at: Optional[datetime] = None
    download_url: Optional[StrictStr] = None
    filename: StrictStr
    md5: Optional[StrictStr] = Field(default=None, description="MD5 hash of the file for basic duplicate detection.")
    mime: Optional[StrictStr] = None
    notes: Optional[StrictStr] = None
    size: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    updated_at: Optional[datetime] = None
    upload_url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["attachable_id", "attachable_type", "created_at", "download_url", "filename", "md5", "mime", "notes", "size", "title", "updated_at", "upload_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attachment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "mime",
            "size",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attachment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachable_id": obj.get("attachable_id"),
            "attachable_type": obj.get("attachable_type"),
            "created_at": obj.get("created_at"),
            "download_url": obj.get("download_url"),
            "filename": obj.get("filename"),
            "md5": obj.get("md5"),
            "mime": obj.get("mime"),
            "notes": obj.get("notes"),
            "size": obj.get("size"),
            "title": obj.get("title"),
            "updated_at": obj.get("updated_at"),
            "upload_url": obj.get("upload_url")
        })
        return _obj


