# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API

    The version of the OpenAPI document: 6.1.24
    Contact: james@firefly-iii.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from firefly_iii_client.models.account_type_property import AccountTypeProperty
from firefly_iii_client.models.transaction_type_property import TransactionTypeProperty
from typing import Optional, Set
from typing_extensions import Self

class TransactionSplit(BaseModel):
    """
    TransactionSplit
    """ # noqa: E501
    amount: StrictStr = Field(description="Amount of the transaction.")
    bill_id: Optional[StrictStr] = Field(default=None, description="Optional. Use either this or the bill_name")
    bill_name: Optional[StrictStr] = Field(default=None, description="Optional. Use either this or the bill_id")
    book_date: Optional[datetime] = None
    budget_id: Optional[StrictStr] = Field(default=None, description="The budget ID for this transaction.")
    budget_name: Optional[StrictStr] = Field(default=None, description="The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.")
    bunq_payment_id: Optional[StrictStr] = Field(default=None, description="Internal ID of bunq transaction. DEPRECATED")
    category_id: Optional[StrictStr] = Field(default=None, description="The category ID for this transaction.")
    category_name: Optional[StrictStr] = Field(default=None, description="The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name.")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.")
    currency_decimal_places: Optional[StrictInt] = Field(default=None, description="Number of decimals used in this currency.")
    currency_id: Optional[StrictStr] = Field(default=None, description="Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.")
    currency_name: Optional[StrictStr] = None
    currency_symbol: Optional[StrictStr] = None
    var_date: datetime = Field(description="Date of the transaction", alias="date")
    description: StrictStr = Field(description="Description of the transaction.")
    destination_iban: Optional[StrictStr] = None
    destination_id: Optional[StrictStr] = Field(description="ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account.")
    destination_name: Optional[StrictStr] = Field(default=None, description="Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough.")
    destination_type: Optional[AccountTypeProperty] = None
    due_date: Optional[datetime] = None
    external_id: Optional[StrictStr] = Field(default=None, description="Reference to external ID in other systems.")
    external_url: Optional[StrictStr] = Field(default=None, description="External, custom URL for this transaction.")
    foreign_amount: Optional[StrictStr] = Field(default=None, description="The amount in a foreign currency.")
    foreign_currency_code: Optional[StrictStr] = Field(default=None, description="Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.")
    foreign_currency_decimal_places: Optional[StrictInt] = Field(default=None, description="Number of decimals in the currency")
    foreign_currency_id: Optional[StrictStr] = Field(default=None, description="Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.")
    foreign_currency_symbol: Optional[StrictStr] = None
    has_attachments: Optional[StrictBool] = Field(default=None, description="If the transaction has attachments.")
    import_hash_v2: Optional[StrictStr] = Field(default=None, description="Hash value of original import transaction (for duplicate detection).")
    interest_date: Optional[datetime] = None
    internal_reference: Optional[StrictStr] = Field(default=None, description="Reference to internal reference of other systems.")
    invoice_date: Optional[datetime] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the transaction's location, if applicable. Can be used to draw a map.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the transaction's location, if applicable. Can be used to draw a map.")
    notes: Optional[StrictStr] = None
    order: Optional[StrictInt] = Field(default=None, description="Order of this entry in the list of transactions.")
    original_source: Optional[StrictStr] = Field(default=None, description="System generated identifier for original creator of transaction.")
    payment_date: Optional[datetime] = None
    process_date: Optional[datetime] = None
    reconciled: Optional[StrictBool] = Field(default=None, description="If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user.")
    recurrence_count: Optional[StrictInt] = Field(default=None, description="The # of the current transaction created under this recurrence.")
    recurrence_id: Optional[StrictStr] = Field(default=None, description="Reference to recurrence that made the transaction.")
    recurrence_total: Optional[StrictInt] = Field(default=None, description="Total number of transactions expected to be created by this recurrence repetition. Will be 0 if infinite.")
    sepa_batch_id: Optional[StrictStr] = Field(default=None, description="SEPA Batch ID")
    sepa_cc: Optional[StrictStr] = Field(default=None, description="SEPA Clearing Code")
    sepa_ci: Optional[StrictStr] = Field(default=None, description="SEPA Creditor Identifier")
    sepa_country: Optional[StrictStr] = Field(default=None, description="SEPA Country")
    sepa_ct_id: Optional[StrictStr] = Field(default=None, description="SEPA end-to-end Identifier")
    sepa_ct_op: Optional[StrictStr] = Field(default=None, description="SEPA Opposing Account Identifier")
    sepa_db: Optional[StrictStr] = Field(default=None, description="SEPA mandate identifier")
    sepa_ep: Optional[StrictStr] = Field(default=None, description="SEPA External Purpose indicator")
    source_iban: Optional[StrictStr] = None
    source_id: Optional[StrictStr] = Field(description="ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account.")
    source_name: Optional[StrictStr] = Field(default=None, description="Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name.")
    source_type: Optional[AccountTypeProperty] = None
    tags: Optional[List[StrictStr]] = Field(default=None, description="Array of tags.")
    transaction_journal_id: Optional[StrictStr] = Field(default=None, description="ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals making up the splits of the transaction. ")
    type: TransactionTypeProperty
    user: Optional[StrictStr] = Field(default=None, description="User ID")
    zoom_level: Optional[StrictInt] = Field(default=None, description="Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.")
    __properties: ClassVar[List[str]] = ["amount", "bill_id", "bill_name", "book_date", "budget_id", "budget_name", "bunq_payment_id", "category_id", "category_name", "currency_code", "currency_decimal_places", "currency_id", "currency_name", "currency_symbol", "date", "description", "destination_iban", "destination_id", "destination_name", "destination_type", "due_date", "external_id", "external_url", "foreign_amount", "foreign_currency_code", "foreign_currency_decimal_places", "foreign_currency_id", "foreign_currency_symbol", "has_attachments", "import_hash_v2", "interest_date", "internal_reference", "invoice_date", "latitude", "longitude", "notes", "order", "original_source", "payment_date", "process_date", "reconciled", "recurrence_count", "recurrence_id", "recurrence_total", "sepa_batch_id", "sepa_cc", "sepa_ci", "sepa_country", "sepa_ct_id", "sepa_ct_op", "sepa_db", "sepa_ep", "source_iban", "source_id", "source_name", "source_type", "tags", "transaction_journal_id", "type", "user", "zoom_level"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionSplit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "budget_name",
            "currency_decimal_places",
            "currency_name",
            "currency_symbol",
            "destination_iban",
            "foreign_currency_decimal_places",
            "foreign_currency_symbol",
            "import_hash_v2",
            "original_source",
            "recurrence_count",
            "recurrence_id",
            "recurrence_total",
            "source_iban",
            "transaction_journal_id",
            "user",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if bill_id (nullable) is None
        # and model_fields_set contains the field
        if self.bill_id is None and "bill_id" in self.model_fields_set:
            _dict['bill_id'] = None

        # set to None if bill_name (nullable) is None
        # and model_fields_set contains the field
        if self.bill_name is None and "bill_name" in self.model_fields_set:
            _dict['bill_name'] = None

        # set to None if book_date (nullable) is None
        # and model_fields_set contains the field
        if self.book_date is None and "book_date" in self.model_fields_set:
            _dict['book_date'] = None

        # set to None if budget_id (nullable) is None
        # and model_fields_set contains the field
        if self.budget_id is None and "budget_id" in self.model_fields_set:
            _dict['budget_id'] = None

        # set to None if budget_name (nullable) is None
        # and model_fields_set contains the field
        if self.budget_name is None and "budget_name" in self.model_fields_set:
            _dict['budget_name'] = None

        # set to None if bunq_payment_id (nullable) is None
        # and model_fields_set contains the field
        if self.bunq_payment_id is None and "bunq_payment_id" in self.model_fields_set:
            _dict['bunq_payment_id'] = None

        # set to None if category_id (nullable) is None
        # and model_fields_set contains the field
        if self.category_id is None and "category_id" in self.model_fields_set:
            _dict['category_id'] = None

        # set to None if category_name (nullable) is None
        # and model_fields_set contains the field
        if self.category_name is None and "category_name" in self.model_fields_set:
            _dict['category_name'] = None

        # set to None if currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.currency_code is None and "currency_code" in self.model_fields_set:
            _dict['currency_code'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currency_id'] = None

        # set to None if destination_iban (nullable) is None
        # and model_fields_set contains the field
        if self.destination_iban is None and "destination_iban" in self.model_fields_set:
            _dict['destination_iban'] = None

        # set to None if destination_id (nullable) is None
        # and model_fields_set contains the field
        if self.destination_id is None and "destination_id" in self.model_fields_set:
            _dict['destination_id'] = None

        # set to None if destination_name (nullable) is None
        # and model_fields_set contains the field
        if self.destination_name is None and "destination_name" in self.model_fields_set:
            _dict['destination_name'] = None

        # set to None if due_date (nullable) is None
        # and model_fields_set contains the field
        if self.due_date is None and "due_date" in self.model_fields_set:
            _dict['due_date'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if external_url (nullable) is None
        # and model_fields_set contains the field
        if self.external_url is None and "external_url" in self.model_fields_set:
            _dict['external_url'] = None

        # set to None if foreign_amount (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_amount is None and "foreign_amount" in self.model_fields_set:
            _dict['foreign_amount'] = None

        # set to None if foreign_currency_code (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_currency_code is None and "foreign_currency_code" in self.model_fields_set:
            _dict['foreign_currency_code'] = None

        # set to None if foreign_currency_decimal_places (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_currency_decimal_places is None and "foreign_currency_decimal_places" in self.model_fields_set:
            _dict['foreign_currency_decimal_places'] = None

        # set to None if foreign_currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_currency_id is None and "foreign_currency_id" in self.model_fields_set:
            _dict['foreign_currency_id'] = None

        # set to None if foreign_currency_symbol (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_currency_symbol is None and "foreign_currency_symbol" in self.model_fields_set:
            _dict['foreign_currency_symbol'] = None

        # set to None if import_hash_v2 (nullable) is None
        # and model_fields_set contains the field
        if self.import_hash_v2 is None and "import_hash_v2" in self.model_fields_set:
            _dict['import_hash_v2'] = None

        # set to None if interest_date (nullable) is None
        # and model_fields_set contains the field
        if self.interest_date is None and "interest_date" in self.model_fields_set:
            _dict['interest_date'] = None

        # set to None if internal_reference (nullable) is None
        # and model_fields_set contains the field
        if self.internal_reference is None and "internal_reference" in self.model_fields_set:
            _dict['internal_reference'] = None

        # set to None if invoice_date (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_date is None and "invoice_date" in self.model_fields_set:
            _dict['invoice_date'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if original_source (nullable) is None
        # and model_fields_set contains the field
        if self.original_source is None and "original_source" in self.model_fields_set:
            _dict['original_source'] = None

        # set to None if payment_date (nullable) is None
        # and model_fields_set contains the field
        if self.payment_date is None and "payment_date" in self.model_fields_set:
            _dict['payment_date'] = None

        # set to None if process_date (nullable) is None
        # and model_fields_set contains the field
        if self.process_date is None and "process_date" in self.model_fields_set:
            _dict['process_date'] = None

        # set to None if recurrence_count (nullable) is None
        # and model_fields_set contains the field
        if self.recurrence_count is None and "recurrence_count" in self.model_fields_set:
            _dict['recurrence_count'] = None

        # set to None if recurrence_id (nullable) is None
        # and model_fields_set contains the field
        if self.recurrence_id is None and "recurrence_id" in self.model_fields_set:
            _dict['recurrence_id'] = None

        # set to None if recurrence_total (nullable) is None
        # and model_fields_set contains the field
        if self.recurrence_total is None and "recurrence_total" in self.model_fields_set:
            _dict['recurrence_total'] = None

        # set to None if sepa_batch_id (nullable) is None
        # and model_fields_set contains the field
        if self.sepa_batch_id is None and "sepa_batch_id" in self.model_fields_set:
            _dict['sepa_batch_id'] = None

        # set to None if sepa_cc (nullable) is None
        # and model_fields_set contains the field
        if self.sepa_cc is None and "sepa_cc" in self.model_fields_set:
            _dict['sepa_cc'] = None

        # set to None if sepa_ci (nullable) is None
        # and model_fields_set contains the field
        if self.sepa_ci is None and "sepa_ci" in self.model_fields_set:
            _dict['sepa_ci'] = None

        # set to None if sepa_country (nullable) is None
        # and model_fields_set contains the field
        if self.sepa_country is None and "sepa_country" in self.model_fields_set:
            _dict['sepa_country'] = None

        # set to None if sepa_ct_id (nullable) is None
        # and model_fields_set contains the field
        if self.sepa_ct_id is None and "sepa_ct_id" in self.model_fields_set:
            _dict['sepa_ct_id'] = None

        # set to None if sepa_ct_op (nullable) is None
        # and model_fields_set contains the field
        if self.sepa_ct_op is None and "sepa_ct_op" in self.model_fields_set:
            _dict['sepa_ct_op'] = None

        # set to None if sepa_db (nullable) is None
        # and model_fields_set contains the field
        if self.sepa_db is None and "sepa_db" in self.model_fields_set:
            _dict['sepa_db'] = None

        # set to None if sepa_ep (nullable) is None
        # and model_fields_set contains the field
        if self.sepa_ep is None and "sepa_ep" in self.model_fields_set:
            _dict['sepa_ep'] = None

        # set to None if source_iban (nullable) is None
        # and model_fields_set contains the field
        if self.source_iban is None and "source_iban" in self.model_fields_set:
            _dict['source_iban'] = None

        # set to None if source_id (nullable) is None
        # and model_fields_set contains the field
        if self.source_id is None and "source_id" in self.model_fields_set:
            _dict['source_id'] = None

        # set to None if source_name (nullable) is None
        # and model_fields_set contains the field
        if self.source_name is None and "source_name" in self.model_fields_set:
            _dict['source_name'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if zoom_level (nullable) is None
        # and model_fields_set contains the field
        if self.zoom_level is None and "zoom_level" in self.model_fields_set:
            _dict['zoom_level'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionSplit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "bill_id": obj.get("bill_id"),
            "bill_name": obj.get("bill_name"),
            "book_date": obj.get("book_date"),
            "budget_id": obj.get("budget_id"),
            "budget_name": obj.get("budget_name"),
            "bunq_payment_id": obj.get("bunq_payment_id"),
            "category_id": obj.get("category_id"),
            "category_name": obj.get("category_name"),
            "currency_code": obj.get("currency_code"),
            "currency_decimal_places": obj.get("currency_decimal_places"),
            "currency_id": obj.get("currency_id"),
            "currency_name": obj.get("currency_name"),
            "currency_symbol": obj.get("currency_symbol"),
            "date": obj.get("date"),
            "description": obj.get("description"),
            "destination_iban": obj.get("destination_iban"),
            "destination_id": obj.get("destination_id"),
            "destination_name": obj.get("destination_name"),
            "destination_type": obj.get("destination_type"),
            "due_date": obj.get("due_date"),
            "external_id": obj.get("external_id"),
            "external_url": obj.get("external_url"),
            "foreign_amount": obj.get("foreign_amount"),
            "foreign_currency_code": obj.get("foreign_currency_code"),
            "foreign_currency_decimal_places": obj.get("foreign_currency_decimal_places"),
            "foreign_currency_id": obj.get("foreign_currency_id"),
            "foreign_currency_symbol": obj.get("foreign_currency_symbol"),
            "has_attachments": obj.get("has_attachments"),
            "import_hash_v2": obj.get("import_hash_v2"),
            "interest_date": obj.get("interest_date"),
            "internal_reference": obj.get("internal_reference"),
            "invoice_date": obj.get("invoice_date"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "notes": obj.get("notes"),
            "order": obj.get("order"),
            "original_source": obj.get("original_source"),
            "payment_date": obj.get("payment_date"),
            "process_date": obj.get("process_date"),
            "reconciled": obj.get("reconciled"),
            "recurrence_count": obj.get("recurrence_count"),
            "recurrence_id": obj.get("recurrence_id"),
            "recurrence_total": obj.get("recurrence_total"),
            "sepa_batch_id": obj.get("sepa_batch_id"),
            "sepa_cc": obj.get("sepa_cc"),
            "sepa_ci": obj.get("sepa_ci"),
            "sepa_country": obj.get("sepa_country"),
            "sepa_ct_id": obj.get("sepa_ct_id"),
            "sepa_ct_op": obj.get("sepa_ct_op"),
            "sepa_db": obj.get("sepa_db"),
            "sepa_ep": obj.get("sepa_ep"),
            "source_iban": obj.get("source_iban"),
            "source_id": obj.get("source_id"),
            "source_name": obj.get("source_name"),
            "source_type": obj.get("source_type"),
            "tags": obj.get("tags"),
            "transaction_journal_id": obj.get("transaction_journal_id"),
            "type": obj.get("type"),
            "user": obj.get("user"),
            "zoom_level": obj.get("zoom_level")
        })
        return _obj


